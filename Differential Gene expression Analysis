%pip install pydeseq2
from pydeseq2.dds import DeseqDataSet
from pydeseq2.ds import DeseqStats

import pandas as pd
counts = pd.read_csv('genedata.csv')
counts

counts = counts.set_index('Gene_symbol')
counts

counts = counts[counts.sum(axis = 1) > 0]
counts

counts = counts.T
counts

metadata = pd.DataFrame(zip(counts.index, ['CT', 'CT', 'PD', 'PD', 'CT', 'CT', 'CT', 'CT', 'CT', 'CT', 'CT', 'CT', 'CT', 'CT', 'CT', 'CT', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'CT', 'CT', 'CT', 'CT', 'CT', 'CT', 'CT', 'CT', 'CT', 'CT', 'CT', 'CT', 'CT', 'CT', 'CT', 'CT', 'CT', 'CT', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'CT', 'CT', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', '
metadata = metadata.set_index('Sample')
metadata
dds = DeseqDataSet(counts=counts,
            metadata=metadata,
            design_factors="Condition")

dds.var_names_make_unique

%pip install utils
import utils
dds.var_names_make_unique()
dds

dds.deseq2()
dds

stat_res = DeseqStats(dds, contrast = ('Condition','PD','CT'))
stat_res.summary()
res = stat_res.results_df
res

%pip install sanbomics
mapper = res.index
res['Symbol'] = mapper 
res

res = res[res.baseMean >= 10]
res

sigs = res[(res.padj < 0.05) & (abs(res.log2FoldChange) > 0.5)]
sigs

%pip install scanpy
#PCA
import scanpy as sc

dds
sc.tl.pca(dds)
sc.pl.pca(dds, color = 'Condition', size = 200)

%pip install gseapy
#GSEA

import gseapy as gp
from gseapy.plot import gseaplot

res
ranking = res[['stat']].dropna().sort_values('stat', ascending = False)
ranking

ranking = ranking.drop_duplicates('stat')
ranking

manual_set = {'things':['H3C15', 'H4C15', 'LINC-PINT', 'KCNE4', 'NUP210L']}
pre_res = gp.prerank(rnk = ranking,
                     gene_sets = ['GO_Biological_Process_2021', manual_set],
                     seed = 6, permutation_num = 100)

out = []

for term in list(pre_res.results):
    out.append([term,
               pre_res.results[term]['fdr'],
               pre_res.results[term]['es'],
               pre_res.results[term]['nes']])

out_df = pd.DataFrame(out, columns = ['Term','fdr', 'es', 'nes']).sort_values('fdr').reset_index(drop = True)
out_df

out_df.sort_values('nes').iloc[1].Term

gseaplot(
         term = 'GO_Biological_Process_2021__aerobic electron transport chain (GO:0019646)',
         **pre_res.results['GO_Biological_Process_2021__aerobic electron transport chain (GO:0019646)'])

import numpy as np
import seaborn as sns

dds.layers['normed_counts']

dds.layers['log1p'] = np.log1p(dds.layers['normed_counts'])

dds.layers['log1p']

sigs

dds_sigs = dds[:, sigs.index]
dds_sigs

grapher = pd.DataFrame(dds_sigs.layers['log1p'].T,
                       index=dds_sigs.var_names, columns=dds_sigs.obs_names)

sns.clustermap(grapher, z_score=0, cmap = 'RdYlBu_r')

with open('senGPT.txt') as f:
    senGPT = [x.strip() for x in list(f)]
senGPT

res[res.Symbol.isin(senGPT)].index
dds_sub = dds[:, sigs[sigs.Symbol.isin(senGPT)].index]
dds_sub

grapher = pd.DataFrame(dds_sub.layers['log1p'].T,
                       index=dds_sub.var_names, columns=dds_sub.obs_names)
grapher

ax = sns.clustermap(grapher, z_score=0, cmap = 'RdYlBu_r', figsize=(4,4))

#volcano
from sanbomics.plots import volcano

res

volcano(res, symbol='Symbol')
grapher.index
volcano(res, symbol='Symbol', to_label = grapher.index)

