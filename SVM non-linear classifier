from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, ConfusionMatrixDisplay, roc_auc_score, roc_curve
import matplotlib.pyplot as plt

# Train the SVM classifier using SVC with polynomial kernel
svm_poly = SVC(kernel='poly', probability=True, random_state=40)
svm_poly.fit(X_train, Y_train)

# Predict samples in the test set
prediction = svm_poly.predict(X_test)

# Calculate Accuracy
Accuracy = accuracy_score(Y_test, prediction)
print('Accuracy:', Accuracy)

# Calculate Precision
Precision = precision_score(Y_test, prediction)
print('Precision:', Precision)

# Calculate Recall
Recall = recall_score(Y_test, prediction)
print('Recall:', Recall)

# Calculate F1 score
F1 = f1_score(Y_test, prediction)
print('F1 score:', F1)

# Calculate confusion matrix
cm = confusion_matrix(Y_test, prediction)

# Calculate Specificity and Sensitivity
TN, FP, FN, TP = cm.ravel()
Specificity = TN / (TN + FP)
Sensitivity = TP / (TP + FN)
print('Specificity:', Specificity)
print('Sensitivity:', Sensitivity)

# Display the confusion matrix
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=svm_poly.classes_)
disp.plot(cmap=plt.cm.Greens)
plt.xlabel('Predicted label', color='black')
plt.ylabel('True label', color='black')
plt.gca().tick_params(axis='x', colors='white')  # Modify ticks on x-axis
plt.gca().tick_params(axis='y', colors='white')  # Modify ticks on y-axis
plt.gcf().set_size_inches(10, 6)
plt.savefig("svm_poly_confusion_matrix.png", dpi=600)
plt.show()

# Calculate ROC curve and AUC
svm_poly_probs = svm_poly.predict_proba(X_test)[:, 1]
svm_poly_auc = roc_auc_score(Y_test, svm_poly_probs)
svm_poly_fpr, svm_poly_tpr, _ = roc_curve(Y_test, svm_poly_probs)

# Plot the ROC curve
fig = plt.figure(figsize=(7, 5))
plt.plot(svm_poly_fpr, svm_poly_tpr, label='SVM_poly = %.3f' % (svm_poly_auc))
params = {'legend.fontsize': 10,
          'legend.handlelength': 2}
plt.rcParams.update(params)
plt.legend()
plt.ylabel('True Positive Rate', fontsize=15)
plt.xlabel('False Positive Rate', fontsize=15)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.legend()
plt.show()
