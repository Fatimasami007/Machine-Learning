import pandas as pd
import numpy as np
import subprocess

# Step 1: Read the RNA-Seq data from a CSV file
input_file = '/path/to/your/data.csv'
df = pd.read_csv(input_file)

# Step 2: Quality control - Remove rows with missing values and duplicates
df_cleaned = df.dropna()  # Remove rows with missing values
df_cleaned = df_cleaned.drop_duplicates()  # Remove duplicate rows

# Step 3: Log transformation to normalize the data
# Apply log transformation to all numeric columns (this stabilizes variance)
df_cleaned = df_cleaned.apply(lambda x: np.log2(x + 1) if np.issubdtype(x.dtype, np.number) else x)

# Step 4: Save the preprocessed data to a new CSV file
df_cleaned.to_csv('preprocessed_data.csv', index=False)

# Step 5: Mapping reads to reference genome using Bowtie2
# Define paths for the Bowtie2 index and input/output files
bowtie2_index = '/path/to/genome_index/hg38_index'
input_reads = '/path/to/your/cleaned_reads.fastq'
output_file = 'aligned_reads.sam'

# Run Bowtie2 alignment
subprocess.run(['bowtie2', '-x', bowtie2_index, '-U', input_reads, '-S', output_file])

# Step 6: Filter low-quality alignments (based on mapping quality)
# For this example, we'll use pysam to filter the SAM file for high-quality mappings
import pysam

# Open the SAM file
samfile = pysam.AlignmentFile(output_file, "r")

# Filter alignments with mapping quality > 30 (high-confidence)
high_quality_alignments = []
for read in samfile:
    if read.mapping_quality > 30:
        high_quality_alignments.append(read)

# Save high-quality alignments to a new file
with open('filtered_alignments.sam', 'w') as out_file:
    for read in high_quality_alignments:
        out_file.write(read.to_string() + '\n')

# Close the SAM file
samfile.close()
#############################Transpose###########################
from pandas import read_csv

import pandas as pd

# Read the high throughput sequence data from a CSV file

df = pd.read_csv('genedata.csv')

# Transpose the DataFrame and save it to a new CSV file
def transpose_and_save(df, output_file):
    transposed_df = df.transpose()
    transposed_df.to_csv(output_file)

# Example usage
if __name__ == "__main__":
    # Read the high throughput sequence data from a CSV file
    input_file = "genedata.csv"
    df = read_csv(input_file)

    # Transpose the DataFrame and save it to a new CSV file
    output_file = "transposed_.csv"
    transpose_and_save(df, output_file)
    print(df)
